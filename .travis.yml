language: cpp

# https://docs.travis-ci.com/user/reference/osx/
# each build in the matrix gets run on a fresh image of a VM
matrix:
  include:
    # https://docs.travis-ci.com/user/reference/bionic/
    # note: bionic (Ubuntu 18.04 LTS) comes with gcc 7.4.0 + clang/llvm 7
    - os: linux
      dist: bionic
      compiler: gcc
    - os: linux
      dist: bionic
      compiler: clang
    # https://docs.travis-ci.com/user/reference/osx/
    # macOS 10.13 and Xcode 9.4.1 by default, but i'm going to overwrite with a newer osx_image (macOS 10.13 and Xcode 10.0)
    # run clang front-end over LLVM back-end
    - os: osx
      osx_image: xcode10
      compiler: clang
    # run gcc front-end over LLVM back-end (not GNU-gcc)
    - os: osx
      osx_image: xcode10
      compiler: gcc
script:
  - cmake --version
  # print out file permissions to make sure shell script is executable (x-flag)
  - ls -l
  # note: I feed LICENSE file into the shell script to cause it to exit once it hits the pause at its end (reads first char in file), this is a fix to prevent travis from hanging for 10? minutes, since no key could be pressed to terminate
  - ./dev-build-all.sh < LICENSE
  # note: any directory changing within a shell script is isolated since it runs in a subshell
  # https://stackoverflow.com/questions/255414/why-doesnt-cd-work-in-a-shell-script
  # DEBUG config...
  - cd build/Debug
  # print out all directory contents
  - ls -a
  # print out file info for the executable (I want to see if x86 or x64)
  - file cpp-xplatform
  # print out these 2 files (useful info)
  - cat Makefile
  - cat CMakeCache.txt
  - cd ../..
  # MINSIZEREL config...
  - cd build/MinSizeRel
  # print out all directory contents
  - ls -a
  # print out file info for the executable (I want to see if x86 or x64)
  - file cpp-xplatform
  # print out these 2 files (useful info)
  - cat Makefile
  - cat CMakeCache.txt
  - cd ../..
  # RELEASE config...
  - cd build/Release
  # print out all directory contents
  - ls -a
  # print out file info for the executable (I want to see if x86 or x64)
  - file cpp-xplatform
  # print out these 2 files (useful info)
  - cat Makefile
  - cat CMakeCache.txt
  - cd ../..
  # RELWITHDEBINFO config...
  - cd build/RelWithDebInfo
  # print out all directory contents
  - ls -a
  # print out file info for the executable (I want to see if x86 or x64)
  - file cpp-xplatform
  # print out these 2 files (useful info)
  - cat Makefile
  - cat CMakeCache.txt
  - cd ../..